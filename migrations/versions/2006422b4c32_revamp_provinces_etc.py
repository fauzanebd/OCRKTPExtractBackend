"""revamp provinces etc

Revision ID: 2006422b4c32
Revises: c0fb0a7798f7
Create Date: 2024-09-29 11:19:24.285561

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2006422b4c32'
down_revision = 'c0fb0a7798f7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('provinces', schema=None) as batch_op:
        batch_op.add_column(sa.Column('code', sa.String(length=2), nullable=False))
        batch_op.create_unique_constraint(None, ['code'])
        
    op.create_table('cities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('province_code', sa.String(length=2), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=5), nullable=False),
    sa.ForeignKeyConstraint(['province_code'], ['provinces.code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )

    with op.batch_alter_table('subdistricts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('city_code', sa.String(length=5), nullable=False))
        batch_op.add_column(sa.Column('code', sa.String(length=8), nullable=False))
        batch_op.create_unique_constraint(None, ['code'])
        batch_op.drop_constraint('subdistricts_regency_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'cities', ['city_code'], ['code'])
        batch_op.drop_column('regency_id')
        
    op.create_table('wards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subdistrict_code', sa.String(length=8), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=13), nullable=False),
    sa.ForeignKeyConstraint(['subdistrict_code'], ['subdistricts.code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )

    with op.batch_alter_table('villages', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ward_code', sa.String(length=10), nullable=False))
        batch_op.add_column(sa.Column('code', sa.String(length=20), nullable=False))
        batch_op.create_unique_constraint(None, ['code'])
        batch_op.drop_constraint('villages_urban_village_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'wards', ['ward_code'], ['code'])
        batch_op.drop_column('urban_village_id')
    
    with op.batch_alter_table('data_pemilih', schema=None) as batch_op:
        batch_op.add_column(sa.Column('province_code', sa.String(length=2), nullable=False))
        batch_op.add_column(sa.Column('city_code', sa.String(length=5), nullable=False))
        batch_op.add_column(sa.Column('subdistrict_code', sa.String(length=8), nullable=False))
        batch_op.add_column(sa.Column('ward_code', sa.String(length=13), nullable=False))
        batch_op.add_column(sa.Column('village_code', sa.String(length=20), nullable=False))
        batch_op.drop_constraint('data_pemilih_subdistrict_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('data_pemilih_village_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('data_pemilih_province_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('data_pemilih_regency_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('data_pemilih_urban_villages_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'provinces', ['province_code'], ['code'])
        batch_op.create_foreign_key(None, 'villages', ['village_code'], ['code'])
        batch_op.create_foreign_key(None, 'cities', ['city_code'], ['code'])
        batch_op.create_foreign_key(None, 'wards', ['ward_code'], ['code'])
        batch_op.create_foreign_key(None, 'subdistricts', ['subdistrict_code'], ['code'])
        batch_op.drop_column('village_id')
        batch_op.drop_column('regency_id')
        batch_op.drop_column('province_id')
        batch_op.drop_column('subdistrict_id')
        batch_op.drop_column('urban_villages_id')


    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('province_code', sa.String(length=2), nullable=True))
        batch_op.add_column(sa.Column('city_code', sa.String(length=5), nullable=True))
        batch_op.add_column(sa.Column('subdistrict_code', sa.String(length=8), nullable=True))
        batch_op.add_column(sa.Column('ward_code', sa.String(length=13), nullable=True))
        batch_op.add_column(sa.Column('village_code', sa.String(length=20), nullable=True))
        batch_op.drop_constraint('users_regency_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('users_subdistrict_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('users_urban_village_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('users_province_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('users_village_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'provinces', ['province_code'], ['code'])
        batch_op.create_foreign_key(None, 'cities', ['city_code'], ['code'])
        batch_op.create_foreign_key(None, 'subdistricts', ['subdistrict_code'], ['code'])
        batch_op.create_foreign_key(None, 'wards', ['ward_code'], ['code'])
        batch_op.create_foreign_key(None, 'villages', ['village_code'], ['code'])
        batch_op.drop_column('village_id')
        batch_op.drop_column('urban_village_id')
        batch_op.drop_column('regency_id')
        batch_op.drop_column('province_id')
        batch_op.drop_column('subdistrict_id')

    op.drop_table('urban_villages')
    op.drop_table('regencies')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('villages', schema=None) as batch_op:
        batch_op.add_column(sa.Column('urban_village_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('villages_urban_village_id_fkey', 'urban_villages', ['urban_village_id'], ['id'])
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('code')
        batch_op.drop_column('ward_code')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subdistrict_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('regency_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('urban_village_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('village_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('users_village_id_fkey', 'villages', ['village_id'], ['id'])
        batch_op.create_foreign_key('users_province_id_fkey', 'provinces', ['province_id'], ['id'])
        batch_op.create_foreign_key('users_urban_village_id_fkey', 'urban_villages', ['urban_village_id'], ['id'])
        batch_op.create_foreign_key('users_subdistrict_id_fkey', 'subdistricts', ['subdistrict_id'], ['id'])
        batch_op.create_foreign_key('users_regency_id_fkey', 'regencies', ['regency_id'], ['id'])
        batch_op.drop_column('village_code')
        batch_op.drop_column('ward_code')
        batch_op.drop_column('subdistrict_code')
        batch_op.drop_column('city_code')
        batch_op.drop_column('province_code')

    with op.batch_alter_table('subdistricts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('regency_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('subdistricts_regency_id_fkey', 'regencies', ['regency_id'], ['id'])
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('code')
        batch_op.drop_column('city_code')

    with op.batch_alter_table('provinces', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('code')

    with op.batch_alter_table('data_pemilih', schema=None) as batch_op:
        batch_op.add_column(sa.Column('urban_villages_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('subdistrict_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('regency_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('village_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('data_pemilih_urban_villages_id_fkey', 'urban_villages', ['urban_villages_id'], ['id'])
        batch_op.create_foreign_key('data_pemilih_regency_id_fkey', 'regencies', ['regency_id'], ['id'])
        batch_op.create_foreign_key('data_pemilih_province_id_fkey', 'provinces', ['province_id'], ['id'])
        batch_op.create_foreign_key('data_pemilih_village_id_fkey', 'villages', ['village_id'], ['id'])
        batch_op.create_foreign_key('data_pemilih_subdistrict_id_fkey', 'subdistricts', ['subdistrict_id'], ['id'])
        batch_op.drop_column('village_code')
        batch_op.drop_column('ward_code')
        batch_op.drop_column('subdistrict_code')
        batch_op.drop_column('city_code')
        batch_op.drop_column('province_code')

    op.create_table('regencies',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('regencies_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['province_id'], ['provinces.id'], name='regencies_province_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='regencies_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('urban_villages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subdistrict_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['subdistrict_id'], ['subdistricts.id'], name='urban_villages_subdistrict_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='urban_villages_pkey')
    )
    op.drop_table('wards')
    op.drop_table('cities')
    # ### end Alembic commands ###
